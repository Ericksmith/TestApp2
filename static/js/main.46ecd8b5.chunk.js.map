{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","startVideo","console","log","video","current","navigator","mediaDevices","getUserMedia","audio","then","localMediaStream","src","window","URL","createObjectURL","play","catch","err","error","canvas","ctx","getContext","width","videoWidth","height","videoHeight","font","fillText","gradient","createLinearGradient","addColorStop","fillStyle","globalCompositeOperation","setInterval","drawImage","takePhoto","strip","data","toDataURL","link","document","createElement","href","setAttribute","innerHTML","concat","insertBefore","firstChild","React","createRef","state","caches","react_default","a","className","onClick","ref","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","getElementById","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.46ecd8b5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.video = React.createRef();\n    this.canvas = React.createRef();\n    this.strip = React.createRef();\n    this.state = {};\n  }\n\n  componentDidMount() {\n    console.log(caches);\n  }\n\n  startVideo = () => {\n    console.log(\"running\");\n    const video = this.video.current;\n    navigator.mediaDevices\n      .getUserMedia({ video: true, audio: false })\n      .then(localMediaStream => {\n        console.log(localMediaStream);\n        video.src = window.URL.createObjectURL(localMediaStream);\n        video.play();\n      })\n      .catch(err => {\n        console.error(`OH NO!!!`, err);\n      });\n    const canvas = this.canvas.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    const width = video.videoWidth;\n    const height = video.videoHeight;\n    canvas.width = width;\n    canvas.height = height;\n    console.log(width, height);\n    ctx.font = \"100px Georgia\";\n    ctx.fillText(\"3rdAve!\", 10, 50);\n\n    ctx.font = \"30px Verdana\";\n    \n    // Create gradient\n    var gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);\n    gradient.addColorStop(\"0\", \"magenta\");\n    gradient.addColorStop(\"0.5\", \"blue\");\n    gradient.addColorStop(\"1.0\", \"red\");\n    // Fill with gradient\n    ctx.fillStyle = gradient;\n    ctx.globalCompositeOperation='destination-over';\n    // ctx.fillText('test', 0, 7*50)\n\n    return setInterval(() => {\n      ctx.drawImage(video, 0, 0, width, height);\n    }, 16);\n  };\n\n  takePhoto = () => {\n    const strip = this.strip.current;\n    const canvas = this.canvas.current;\n    const data = canvas.toDataURL(\"image/jpeg\");\n    const link = document.createElement(\"a\");\n    link.href = data;\n    link.setAttribute(\"download\", \"handsome\");\n    link.innerHTML = `<img src=\"${data}\" alt=\"Photo\" />`;\n    strip.insertBefore(link, strip.firstChild);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"controls\">\n          <button onClick={this.startVideo}>Start Program</button>\n          <button onClick={this.takePhoto}>Take Photo</button>\n        </div>\n        <header className=\"App-header\">\n          <video className=\"player\" ref={this.video} />\n          <canvas className=\"photo\" ref={this.canvas} />\n          <div className=\"strip\" ref={this.strip} />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}